static const unsigned char PROGMEM  logo[] =
{/* 0X00,0X01,0X7C,0X00,0X40,0X00, */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x03, 0xf0, 0x00, 0x07, 0xfe, 0x00, 0x01, 0xff, 0x00, 0x00, 0x0f, 0xfc, 0x00, 0x1f, 0x80, 
0x00, 0x0f, 0xfc, 0x00, 0x3f, 0xff, 0x80, 0x0f, 0xff, 0xc0, 0x00, 0x7f, 0xff, 0x00, 0x7f, 0xc0, 
0x00, 0x1c, 0x3e, 0x00, 0x7c, 0x0f, 0x80, 0x3f, 0x01, 0xf0, 0x00, 0xf8, 0x1f, 0x00, 0xf0, 0xe0, 
0x00, 0x38, 0x1e, 0x01, 0xf0, 0x0f, 0x00, 0x78, 0x00, 0x78, 0x03, 0xe0, 0x1e, 0x01, 0xe0, 0x70, 
0x00, 0x30, 0x0c, 0x03, 0xe0, 0x0e, 0x00, 0xe0, 0x1c, 0x78, 0x07, 0xc0, 0x1c, 0x03, 0xc0, 0x70, 
0x00, 0x70, 0x0c, 0x07, 0xc0, 0x1e, 0x01, 0xc0, 0x78, 0x3c, 0x0f, 0x80, 0x3c, 0x07, 0x80, 0x70, 
0x00, 0x70, 0x08, 0x07, 0x80, 0x3c, 0x01, 0xc0, 0xf0, 0x3c, 0x0f, 0x00, 0x78, 0x0f, 0x00, 0x70, 
0x00, 0x70, 0x00, 0x0f, 0x00, 0x3c, 0x03, 0x80, 0xe0, 0x3c, 0x1e, 0x00, 0x78, 0x1e, 0x00, 0x70, 
0x00, 0x78, 0x00, 0x1f, 0x00, 0x78, 0x03, 0x81, 0xe0, 0x3c, 0x3e, 0x00, 0xf0, 0x1e, 0x00, 0xf0, 
0x00, 0x78, 0x00, 0x1e, 0x00, 0x78, 0x03, 0x81, 0xc0, 0x78, 0x3c, 0x00, 0xf0, 0x3c, 0x01, 0xe0, 
0x00, 0x3e, 0x00, 0x1e, 0x00, 0xf0, 0x03, 0xc3, 0xc0, 0x78, 0x3c, 0x01, 0xe0, 0x3c, 0x23, 0xe0, 
0x00, 0x3f, 0x00, 0x3c, 0x00, 0xf0, 0x03, 0xe3, 0xc0, 0xe0, 0x78, 0x01, 0xe0, 0x3c, 0x3f, 0xc0, 
0x00, 0x1f, 0xc0, 0x3c, 0x01, 0xf0, 0x01, 0xc3, 0xdf, 0x80, 0x78, 0x03, 0xe0, 0x78, 0x3f, 0x80, 
0x00, 0x0f, 0xe0, 0x3c, 0x01, 0xe0, 0x00, 0x03, 0xdc, 0x00, 0x78, 0x03, 0xc0, 0x78, 0x1f, 0x00, 
0x00, 0x03, 0xf0, 0x7c, 0x01, 0xe0, 0x00, 0x03, 0xc6, 0x00, 0xf8, 0x03, 0xc0, 0x78, 0x00, 0x00, 
0x00, 0x01, 0xf0, 0x78, 0x01, 0xe0, 0x00, 0x03, 0x87, 0x00, 0xf0, 0x03, 0xc0, 0x78, 0x00, 0x00, 
0x00, 0x00, 0x78, 0x78, 0x03, 0xc0, 0x00, 0x07, 0x87, 0x80, 0xf0, 0x07, 0x80, 0x78, 0x00, 0x00, 
0x00, 0x00, 0x78, 0x78, 0x03, 0xc0, 0x00, 0x07, 0x87, 0x80, 0xf0, 0x07, 0x80, 0x78, 0x00, 0x00, 
0x02, 0x00, 0x38, 0x78, 0x03, 0xc0, 0x00, 0x07, 0x87, 0x80, 0xf0, 0x07, 0x80, 0x78, 0x00, 0x00, 
0x06, 0x00, 0x38, 0x78, 0x03, 0xc0, 0x48, 0x07, 0x0f, 0x82, 0xf0, 0x07, 0x80, 0xfc, 0x00, 0x08, 
0x06, 0x00, 0x30, 0x78, 0x07, 0xc0, 0x58, 0x0f, 0x0f, 0x02, 0xf0, 0x0f, 0x80, 0xbc, 0x00, 0x08, 
0x0f, 0x00, 0x70, 0x7c, 0x0f, 0xc0, 0xf8, 0x0e, 0x0f, 0x0e, 0xf8, 0x1f, 0x81, 0xbe, 0x00, 0x18, 
0x0f, 0x00, 0xe0, 0x3e, 0x3b, 0xe3, 0xb8, 0x1c, 0x0f, 0x1c, 0x7c, 0x77, 0xc7, 0x1f, 0x00, 0x30, 
0x07, 0xc1, 0xc0, 0x3f, 0xf3, 0xff, 0x3c, 0x78, 0x0f, 0xf8, 0x7f, 0xe7, 0xfe, 0x0f, 0xc0, 0xc0, 
0x03, 0xff, 0x80, 0x1f, 0xe1, 0xfc, 0x1f, 0xf0, 0x07, 0xf0, 0x3f, 0xc3, 0xf8, 0x07, 0xff, 0x80, 
0x00, 0xfe, 0x00, 0x0f, 0x80, 0xf8, 0x0f, 0xc0, 0x03, 0xc0, 0x1f, 0x01, 0xf0, 0x01, 0xfc, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};


// 6 Channel Transmitter | 6 Kanal Verici
  #include <SPI.h>
  #include <nRF24L01.h>
  #include <RF24.h>
  #include <Adafruit_GFX.h>         // Ekran kütüphaneleri tanımlama
  #include <Adafruit_SH1106.h> 
  /////////////////////////////
  //OLED Ayarları
  #define OLED_RESET 8
  Adafruit_SH1106 display(OLED_RESET);
  #define NUMFLAKES 10
  #define XPOS 0
  #define YPOS 1
  #define DELTAY 2
  #define LOGO16_GLCD_HEIGHT 16 
  #define LOGO16_GLCD_WIDTH  1
  #if (SH1106_LCDHEIGHT != 64)
  #error("Height incorrect, please fix Adafruit_SH1106.h!");
  #endif
  //////////////////////////
  const uint64_t pipeOut = 0xE9E8F0F0E1LL;   //IMPORTANT: The same as in the receiver 0xE9E8F0F0E1LL | Bu adres alıcı ile aynı olmalı
  RF24 radio(9, 10); // select CE,CSN pin | CE ve CSN pinlerin seçimi
  struct Signal {
  byte throttle;
  byte pitch;
  byte roll;
  byte yaw;
  byte aux1;
  byte aux2;
};
  Signal data;
  void ResetData() 
{
  data.throttle = 127;   // Motor stop | Motor Kapalı (Signal lost position | sinyal kesildiğindeki pozisyon)
  data.pitch = 127;    // Center | Merkez (Signal lost position | sinyal kesildiğindeki pozisyon)
  data.roll = 127;     // Center | merkez (Signal lost position | sinyal kesildiğindeki pozisyon)
  data.yaw = 127;     // Center | merkez (Signal lost position | sinyal kesildiğindeki pozisyon)
  data.aux1 = 0;    // Center | merkez (Signal lost position | sinyal kesildiğindeki pozisyon)
  data.aux2 = 0;    // Center | merkez (Signal lost position | sinyal kesildiğindeki pozisyon)
}
  void setup()
{
  
  display.begin(SH1106_SWITCHCAPVCC, 0x3C);  // I2C addr 0x3C ile başlatın (128x32 için)  
  delay(100);
  display.clearDisplay();
  display.setTextSize(1);             //Yazı yüksekliği
  display.setTextColor(WHITE);        //Renk seçimi
  display.drawBitmap(0, 0, logo, 128, 64, 1);
  display.display();
  delay(2000);
  
  //Start everything up
  radio.begin();
  radio.openWritingPipe(pipeOut);
  radio.setAutoAck(false);
  radio.setDataRate(RF24_250KBPS);
  radio.setPALevel(RF24_PA_HIGH);
  radio.stopListening(); //start the radio comunication for Transmitter | Verici olarak sinyal iletişimi başlatılıyor
  ResetData();
 
}
  // Joystick center and its borders | Joystick merkez ve sınırları
  int mapJoystickValues(int val, int lower, int middle, int upper, bool reverse)
{
  val = constrain(val, lower, upper);
  if ( val < middle )
  val = map(val, lower, middle, 0, 128);
  else
  val = map(val, middle, upper, 128, 255);
  return ( reverse ? 255 - val : val );
}
  void loop()
{
  // Control Stick Calibration | Kumanda Kol Kalibrasyonları
  // Setting may be required for the correct values of the control levers. | :Kontrol kolların doğru değerleri için ayar gerekebilir.
  data.throttle = mapJoystickValues( analogRead(A0), 12, 524, 1020, true );  // "true" or "false" for signal direction | "true" veya "false" sinyal yönünü belirler
  data.roll = mapJoystickValues( analogRead(A3), 12, 524, 1020, true );      // "true" or "false" for servo direction | "true" veya "false" servo yönünü belirler
  data.pitch = mapJoystickValues( analogRead(A2), 12, 524, 1020, false );     // "true" or "false" for servo direction | "true" veya "false" servo yönünü belirler
  data.yaw = mapJoystickValues( analogRead(A1), 12, 524, 1020, false );       // "true" or "false" for servo direction | "true" veya "false" servo yönünü belirler

  data.aux1 = digitalRead(2);     // "true" or "false" for servo direction | "true" veya "false" servo yönünü belirler
  data.aux2 = digitalRead(3);     // "true" or "false" for servo direction | "true" veya "false" servo yönünü belirler
  
  display.clearDisplay();     
  display.setCursor(0,16);            //Select where to print 124 x 64
  display.print("T: ");             
  display.print(data.throttle);     
  display.print("      P: ");  
  display.print(data.pitch);    
  display.setCursor(0,29);
  display.print("Y: ");             
  display.print(data.yaw);     
  display.print("      R: ");  
  display.print(data.roll);  
  // 
  display.setCursor(0,42);
  display.print("SW1: ");             
  display.print(digitalRead(2));     
  display.print("      SW2: ");  
  display.print(digitalRead(3));

  display.display();
  radio.write(&data, sizeof(Signal));
}
